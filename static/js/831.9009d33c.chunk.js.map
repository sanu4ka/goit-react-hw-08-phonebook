{"version":3,"file":"static/js/831.9009d33c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","reduxx/contactsSelectors.js","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","page/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import css from './ContactForm.module.css';\nimport { addContact } from '../../reduxx/contactsOperation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const onSubmiting = e => {\n    e.preventDefault();\n    const { name, number } = e.currentTarget.elements;\n\n    if (contacts.find(contact => contact.name === name.value)) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name: name.value,\n      phone: number.value,\n    };\n\n    dispatch(addContact(newContact));\n    e.target.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={onSubmiting}>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <input\n        className={css.input}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactItem_contact__C4k7V\",\"number\":\"ContactItem_number__mfZ8x\",\"listItem\":\"ContactItem_listItem__NSSYk\"};","import css from './ContactItem.module.css';\nimport { deleteContact } from '../../reduxx/contactsOperation';\nimport { useDispatch } from 'react-redux';\n\nconst ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.listItem} key={id}>\n      <p className={css.contact}>\n        {name}: <span className={css.number}> {number}</span>\n      </p>\n      <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","export const getContacts = state => state.contacts.items;\nexport const isContactsLoading = state => state.contacts.isLoading;\n\nconst contactsSelectors = {\n  getContacts,\n  isContactsLoading,\n};\nexport default contactsSelectors;\n","import ContactItem from '../ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport contactsSelectors from '../../reduxx/contactsSelectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filter = useSelector(state => state.filter);\n\n  function getFiltered() {\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  }\n\n  const filteredContacts = getFiltered();\n\n  return (\n    <ul className={css.list}>\n      {filteredContacts.map(({ name, id, number }) => (\n        <ContactItem key={id} contact={{ name, id, number }} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"title\":\"Filter_title__pSkfx\",\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { filteredContacts } from '../../reduxx/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  function onChange(e) {\n    dispatch(filteredContacts(e.currentTarget.value));\n  }\n\n  return (\n    <div className={css.filter}>\n      <p className={css.title}>Find contacts by name</p>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { fetchContacts } from '../../reduxx/contactsOperation';\nimport { useEffect } from 'react';\nimport Filter from '../../components/Filter/Filter';\nimport { isContactsLoading, getContacts } from '../../reduxx/contactsSelectors';\nimport { Box, Typography } from '@mui/material';\nimport { Loader } from '../../components/Loader/Loader';\n\nconst Contacts = () => {\n  const isLoading = useSelector(isContactsLoading);\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      component=\"main\"\n      sx={{\n        mb: 'auto',\n        px: 4,\n        py: 12,\n        display: 'flex',\n        alignItems: 'top',\n      }}\n    >\n      <Box\n        maxWidth=\"360px\"\n        sx={{\n          mx: 4,\n        }}\n      >\n        <Typography variant=\"h5\" component=\"p\">\n          Fill to add a contact\n        </Typography>\n        <ContactForm />\n      </Box>\n      <Box\n        sx={{\n          mx: 4,\n          flexGrow: 1,\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <Typography variant=\"h5\" component=\"p\" sx={{ mx: 3 }}>\n            Contacts\n          </Typography>\n          <Filter />\n        </Box>\n        {isLoading ? <Loader /> : contacts.length !== 0 && <ContactList />}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","className","css","onSubmit","e","preventDefault","currentTarget","elements","name","number","find","contact","value","alert","newContact","phone","addContact","target","reset","type","pattern","title","required","onClick","deleteContact","getContacts","isContactsLoading","isLoading","contactsSelectors","filter","filteredContacts","normalizeFilter","toLowerCase","includes","getFiltered","map","onChange","useEffect","fetchContacts","Box","component","sx","mb","px","py","display","alignItems","maxWidth","mx","Typography","variant","flexGrow","Loader","length"],"sourceRoot":""}